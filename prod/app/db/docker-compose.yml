# Database Services - prod/app/db/docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    build: 
      context: .
      dockerfile: Dockerfile.postgres
    container_name: user_metrics_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-user_metrics_app}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - default
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-user_metrics_app}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: user_metrics_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGLADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - default
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: user_metrics_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - default
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
    name: user_metrics_postgres_data
  pgadmin_data:
    driver: local
    name: user_metrics_pgladmin_data
  redis_data:
    driver: local
    name: user_metrics_redis_data

networks:
  default:
    name: user_metrics_default
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
